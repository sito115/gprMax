#python:
import os
import numpy as np 
from thomas.python.generateRLFLA import antenna_like_RLFLA
from gprMax.input_cmd_funcs import *

isAntenna   = True       # Test for RLFLA and Dipole
isBorehole  = True      # Is Borehole
nSnaps      = 50         # Number of Snapshots
geomScaling = 10          # Scaling Step Size for GeomView
environ     = 'unsatGravel'
boreholeEnv = 'waterBoreHole'
extraInf    = ''

dYAntenna   = 1        # Distance betwenn TX and RX in y direction
resolution  = 0.01      

nPML = 40
command('pml_cells', nPML)    # nPML Cells
# command('pml_cells', nPML, nPML, 0, nPML, nPML, 0)

eps_r      = 1    # Homo environment

steps = dx_dy_dz(resolution, resolution, resolution)
dim   = domain(x=0.8 +2*nPML*resolution , y=dYAntenna + 0.6 + 2*nPML*resolution, z=0.4 + 2*nPML*resolution)

antennaPos = (dim[0]/2-0.6/2+0.26, (dim[1]+dYAntenna)/2, dim[2]/2 )  # Scale Placing of RLFLA


if isBorehole:

    rBoreHole = 0.05
    rAnt      = 0.02

    material(permittivity=80, conductivity=0, permeability=1, magconductivity=0,  name = 'waterBoreHole')
    material(permittivity=1, conductivity=0, permeability=1, magconductivity=0,  name = 'airBoreHole')
    material(permittivity=12.5, conductivity=0, permeability=1, magconductivity=0,  name = 'satGravel')
    material(permittivity=5, conductivity=0, permeability=1, magconductivity=0,  name = 'unsatGravel')

    box(xs= 0, ys= 0, zs=  0,
    xf=dim[0], yf=dim[1] , zf=dim[2]  
    ,material=environ)
 
    cylinder(x1=0, y1=antennaPos[1]+rAnt,z1=antennaPos[2],
             x2=dim[0], y2=antennaPos[1]+rAnt,z2=antennaPos[2],
             radius=rBoreHole, material=boreholeEnv)

    cylinder(x1=0, y1=antennaPos[1]+rAnt-dYAntenna,z1=antennaPos[2],
             x2=dim[0], y2=antennaPos[1]+rAnt-dYAntenna,z2=antennaPos[2],
             radius=rBoreHole, material=boreholeEnv)


    # tSim = time_window(2.5 * dYAntenna * np.sqrt(15) /3e8) # Time window is 3x travel distance between TX-RX
    tSim = time_window(1e-7)

    dirName = 'PlaceAntennas_Dist%.2fm_tSim%.2e_iA%d_iBH%d%s%s%s' %(dYAntenna, tSim, isAntenna, isBorehole, environ, boreholeEnv,extraInf)
else:

    material(permittivity=eps_r, conductivity=0, permeability = 1, magconductivity = 0, name= 'eps_r' + str(eps_r))
    # Homogeneous environment
    box(xs= 0, ys= 0, zs=  0,
        xf=dim[0], yf=dim[1] , zf=dim[2]  
        ,material='eps_r' + str(eps_r))

    # tSim = time_window(3 * dYAntenna * np.sqrt(eps_r) /3e8) # Time window is 3x travel distance between TX-RX
    tSim = time_window(5e-8)

    dirName = 'PlaceAntennas_Dist%.1fm_tSim%.2e_eps%.2f_iA%d_iBH%d' %(dYAntenna, tSim, eps_r, isAntenna, isBorehole)



if isAntenna:
    antenna_like_RLFLA(x=antennaPos[0], y=antennaPos[1], z=antennaPos[2],
                       polarisation='x', azimuth=0, inclination=0,isTx=True, ID='TX', timeDelay=0, timeRemove=tSim)
    antenna_like_RLFLA(x=antennaPos[0], y=antennaPos[1]-dYAntenna, z=antennaPos[2],
                       polarisation='x', azimuth=0, inclination=0,isTx=False, ID='RX', timeDelay = 0, timeRemove=tSim)
else:
    freq    = 200e6
    waveID  = waveform('gaussian', amplitude=1,
                            frequency=freq, identifier='GausDipole')
    hertzian_dipole(polarisation='x', f1=antennaPos[0], f2=antennaPos[1], f3=antennaPos[2], identifier=waveID)
    rx(x=antennaPos[0], y=antennaPos[1]-dYAntenna, z=antennaPos[2])

    dirName = dirName + '_' + '%d' % (freq/1e6) + 'MHz'


if geomScaling >= 1:
    geometry_view(0,0,0,dim[0], dim[1], dim[2], geomScaling*steps[0], geomScaling*steps[1], geomScaling*steps[2],
                dirName, 'n')

    # Logicals
if nSnaps > 0:
    dt = tSim/nSnaps 
    name = 'snap' + dirName +  'dt_%.2e_' %(dt)
    for i in range(1, nSnaps+1):
        snapshot(0, 0, antennaPos[2],
                dim.x, dim.y, antennaPos[2] + steps.z,
                steps.x, steps.y, steps.z,
                
                i*dt, name + str(i))


# NewDir = os.path.join(pathRoot, dirName)
# try: 
#     os.mkdir(NewDir) 
# except OSError as error: 
#     print(error)  
# print('#output_dir: results')


#end_python: